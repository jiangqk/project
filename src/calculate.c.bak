#include "calculate.h"
#include "rr_cfg.h"
#include "async_api.h"
#include "utils.h"

#define REDIS_ERR -1

#define ASYNC_LIBEV_THRESHOLD 5

static RBT_IMEI *root_imei;
static RBT_ROAD *root_road;

static int async_cmd(struct async_ctx *ac, struct cnt_pool *cpool, char *proto, char *buff, void * p_sfd)
{
	void *sfd = (void*)(intptr_t)p_sfd;
	int ok = cmd_to_proto(&proto, buff);
	if (ok == REDIS_ERR){
		cnt_push(cpool, &sfd);
		return -1;
	}		
	async_command(ac, PROTO_TYPE_REDIS, (void*)(intptr_t)sfd, cpool, NULL, NULL, proto,  \
					strlen(proto));
	free(proto);
	
}

static int update_redis(GPS_INFO *gps_info, ROAD_INFO *road_info, struct ev_loop * loop, struct rr_link link)
{
	struct async_ctx *ac = NULL;
	struct cnt_pool *cpool = NULL;
	char redis_speed_info_key[32] = {0};
        char *redis_speed_info_value = NULL;
        char *redis_speed_info_imei_value = NULL;
        char redis_road_info_key[32] = {0};
        char *redis_road_info_value = NULL;
        char redis_active_user_key[32] = {0};
        char *redis_active_user_value = NULL;
        char redis_cd_key[32] = {0};  // `cd` means cityCode
        char redis_cd_field[16] = {0};
        char *redis_cd_value = NULL;
        char redis_cc_key[32] = {0}; // `cc` means countyCode

        sprintf(redis_speed_info_key, "%ld:speedInfo", road_info->roadID);
        redis_speed_info_value = get_redis_speed_info_value(root_road, road_info->roadID);
        sprintf(redis_road_info_key, "%lld:roadInfo", gps_info->IMEI);
        redis_road_info_value = get_redis_road_info_value(root_imei, gps_info->IMEI);
        sprintf(redis_active_user_key, "%ld:activeUser", road_info->roadID);
        redis_active_user_value = get_redis_active_user_value(root_road, road_info->roadID);


	ac = async_initial(loop, QUEUE_TYPE_FIFO, NULL, NULL, NULL, ASYNC_LIBEV_THRESHOLD);
	if (ac){
		bool rc = false;
		void *sfd = (void*)(intptr_t)-1;
		rc = pool_api_gain(&cpool, link.host, link.port, &sfd); 
		
		if (! rc){
			async_distory(ac);
			return -1;
		}
	
		char *proto;
		char buff[256] = {0};

    	 	   if(redis_speed_info_value != NULL && redis_active_user_value != NULL) {
    	   	         redis_speed_info_imei_value = (char *)malloc(strlen(redis_speed_info_value) + \ 
					strlen(redis_active_user_value) + 5);
        	        sprintf(redis_speed_info_imei_value, "%s@%s", redis_active_user_value, 
					redis_speed_info_value);
          		 //     redis_set(conn, redis_speed_info_key, redis_speed_info_imei_value);
			sprintf(buff, "set %s %s", redis_speed_info_key, redis_speed_info_imei_value);
			x_printf(D, "redis command: %s\n", buff);
			async_cmd(ac, cpool, proto, buff, sfd);
			
	       	    }

 			      // redis_set(conn, redis_road_info_key, redis_road_info_value);
			sprintf(buff, "set %s %s", redis_road_info_key, redis_road_info_value);
			x_printf(D, "redis command: %s\n", buff);
			async_cmd(ac, cpool, proto, buff, sfd);
			       // redis_set(conn, redis_active_user_key, redis_active_user_value);
			sprintf(buff, "set %s %s", redis_active_user_key, redis_active_user_value);
			x_printf(D, "redis command: %s\n", buff);
			async_cmd(ac, cpool, proto, buff, sfd);




	     	   if(strcmp(road_info->road_name, "无名称道路") != 0) {
      		          sprintf(redis_cd_key, "%ld:citySpeedInfo", road_info->city_code);
      	       	          sprintf(redis_cc_key, "%d:countySpeedInfo", road_info->county_code);
              		  sprintf(redis_cd_field, "%ld", road_info->roadID);
             		  redis_cd_value = redis_speed_info_value;
    		     	  //redis_hset(conn2, redis_cd_key, redis_cd_field, redis_cd_value);
			sprintf(buff, "hset %s %s %s", redis_cd_key, redis_cd_field, redis_cd_value);
			x_printf(D, "redis command: %s\n", buff);
			async_cmd(ac, cpool, proto, buff, sfd);
        	  	  //redis_hset(conn2, redis_cc_key, redis_cd_field, redis_cd_value); //countyCode zone
			sprintf(buff, "hset %s %s", redis_cc_key, redis_cd_field, redis_cd_value);
			x_printf(D, "redis command: %s\n", buff);
			async_cmd(ac, cpool, proto, buff, sfd);
     	 	 }
		async_startup(ac);
     		free(redis_speed_info_value), redis_speed_info_value = NULL;
    		free(redis_speed_info_imei_value), redis_speed_info_imei_value = NULL;
   	        free(redis_road_info_value), redis_road_info_value = NULL;
   	        free(redis_active_user_value), redis_active_user_value = NULL;
	}	
}

static int same_road(GPS_INFO *gps_info, ROAD_INFO *road_info)
{
        int flag1 = imei_insert(&root_imei, road_info, gps_info->IMEI, gps_info->speed, gps_info->collectTime);
        if(flag1)
        {
                x_printf(E,  "FAILED TO UPDATE root_imei: IMEI->%lld, roadID->%ld\n", gps_info->IMEI, 
				road_info->roadID);
                return -1;
        }
        int flag2 = insert_road_info(&root_road, road_info, gps_info->speed, gps_info->collectTime, 
			gps_info->IMEI, gps_info->point_speed, gps_info->point_cnt);
        if(flag2)
        {
                x_printf(E,  "FAILED TO UPDATE root_road: roadID->%ld, IMEI->%lld\n", road_info->roadID, 
			gps_info->IMEI);
                return -1;
        }
        return 0;
}


static int change_road( GPS_INFO *gps_info, ROAD_INFO *road_info, 
		ROAD_INFO *old_road_info, struct ev_loop * loop, 
		struct rr_link link)
{
        update_redis( gps_info, old_road_info,  loop, link);

        int flag1 = road_delete_imei(root_road, old_road_info->roadID, gps_info->IMEI);
        if(flag1)
        {
                x_printf(E,  "FAILED TO DELETE IMEI:%lld, roadID:%ld\n", gps_info->IMEI, 
			old_road_info->roadID);
                return -1;
        }

        int flag2 = imei_insert(&root_imei, road_info, gps_info->IMEI, gps_info->speed, gps_info->collectTime);
	if(flag2)
        {
                x_printf(E,  "FAILED TO INSERT root_imei: IMEI->%lld, roadID->%ld\n", gps_info->IMEI, 
			road_info->roadID);
                return -1;
        }

        int flag3 = insert_road_info(&root_road, road_info, gps_info->speed, gps_info->collectTime,
					 gps_info->IMEI, gps_info->point_speed, gps_info->point_cnt);
	if(flag3)
        {
                x_printf(E,  "FAILED TO INSERT root_road: roadID->%ld, IMEI->%lld\n", 
			road_info->roadID, gps_info->IMEI);
                return -1;
        }
        return 0;
}

int calculate(GPS_INFO *gps_info, ROAD_INFO *road_info, struct ev_loop *loop,
		struct rr_link link)
{
	ROAD_INFO *old_road_info = NULL;
	
	old_road_info = get_imei_road(root_imei, gps_info->IMEI);
	x_printf(I, "old roadID: %ld, new roadID: %ld\n", old_road_info == NULL ? -1 : old_road_info->roadID, 
			road_info->roadID);
	
	if(old_road_info == NULL || old_road_info->roadID == road_info->roadID) {
		if(same_road(gps_info, road_info) == -1) {
			free(road_info);
                        road_info = NULL;
                        return -1;
                }
	} else {
		if(change_road(gps_info, road_info, old_road_info, loop, link) == -1) {

			free(road_info);
                        road_info = NULL;
                        return -1;
                }
	}
	free(road_info);
        road_info = NULL;
        return 0;
}

